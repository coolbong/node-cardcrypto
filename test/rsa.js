/**
 * Created by coolbong on 2015-06-04.
 */

var rsa = require('../lib/rsa');
var assert = require('assert');

exports.rsa = {
    'public key encryption 1' : function(){
        var m = '98F0C770F23864C2E766DF02D1E833DFF4FFE92D696E1642F0A88C5694C6479D16DB1537BFE29E4FDC6E6E8AFD1B0EB7EA0124723C333179BF19E93F10658B2F776E829E87DAEDA9C94A8B3382199A350C077977C97AFF08FD11310AC950A72C3CA5002EF513FCCC286E646E3C5387535D509514B3B326E1234F9CB48C36DDD44B416D23654034A66F403BA511C5EFA3';
        var e = '03';

        var text = '21EC0FC6E1810DFEEA26545127494B40F5F12FA8670877C4B47516BBCD67EDF5F0652B437B4D3E4E83999E7B8245E2A18A7968E7C3E1C16B5609036E65E0F4AF2C4383AF19F1679DD59726C5D315B21967F5A3E526E645724B61F4C8ABCE98BEB8DF1FD64237DBE356B1F96C73EBA3206AAA4C818518E58E17F0E4265A0A5D7E2196E983C6DA78FC5C73F64E6F3AFF5A';
        var answer = '6A0254133390122000000101019001A078BEB21E7BEE9F85F18E15F1ABB842556A33F84390236605C57C9AAA8127CC7E9C33FBF81894BBA0F53C7D1DE61D64E7C061F1689B1B21D91F0E10A5FD9AB0FCDFC06B5D860968F34D1D04FF6770E533661196B45F219500C9B10B18B71A1464BF6B673C19D432FCB8AB4419EDCC2AE17A4472643A56D1AD98F2910DE3E1B8BC';

        var result = rsa.encrypt(m, e, text);

        assert(answer === result);

        result = Buffer.from(result, 'hex');

        //step 1. public key modulus and certificate have same length
        assert(m.length == text.length);

        //step 2. result data trailer is equal to 0xBC
        assert(result[result.length-1] == 0xBC);

        //step 3. result data header is equal to 0x6A
        assert(result[0] == 0x6A);

        //step 4. result data format is equal to 0x02
        assert(result[1] == 0x02);
    },

    'RSA decryption 128 byte': function() {
        var ca_public_modulus = '98F0C770F23864C2E766DF02D1E833DFF4FFE92D696E1642F0A88C5694C6479D16DB1537BFE29E4FDC6E6E8AFD1B0EB7EA0124723C333179BF19E93F10658B2F776E829E87DAEDA9C94A8B3382199A350C077977C97AFF08FD11310AC950A72C3CA5002EF513FCCC286E646E3C5387535D509514B3B326E1234F9CB48C36DDD44B416D23654034A66F403BA511C5EFA3';
        var ca_public_exponent = '03';

        var encrypted_msg = '21EC0FC6E1810DFEEA26545127494B40F5F12FA8670877C4B47516BBCD67EDF5F0652B437B4D3E4E83999E7B8245E2A18A7968E7C3E1C16B5609036E65E0F4AF2C4383AF19F1679DD59726C5D315B21967F5A3E526E645724B61F4C8ABCE98BEB8DF1FD64237DBE356B1F96C73EBA3206AAA4C818518E58E17F0E4265A0A5D7E2196E983C6DA78FC5C73F64E6F3AFF5A';

        var answer = '6A0254133390122000000101019001A078BEB21E7BEE9F85F18E15F1ABB842556A33F84390236605C57C9AAA8127CC7E9C33FBF81894BBA0F53C7D1DE61D64E7C061F1689B1B21D91F0E10A5FD9AB0FCDFC06B5D860968F34D1D04FF6770E533661196B45F219500C9B10B18B71A1464BF6B673C19D432FCB8AB4419EDCC2AE17A4472643A56D1AD98F2910DE3E1B8BC';

        var result = rsa.encrypt(ca_public_modulus, ca_public_exponent, encrypted_msg);

        assert(result === answer);
    },
    'RSA decryption 144 byte' : function() {
        var ca_public_modulus = '98F0C770F23864C2E766DF02D1E833DFF4FFE92D696E1642F0A88C5694C6479D16DB1537BFE29E4FDC6E6E8AFD1B0EB7EA0124723C333179BF19E93F10658B2F776E829E87DAEDA9C94A8B3382199A350C077977C97AFF08FD11310AC950A72C3CA5002EF513FCCC286E646E3C5387535D509514B3B326E1234F9CB48C36DDD44B416D23654034A66F403BA511C5EFA3';
        var ca_public_exponent = '03';

        var encrypted_msg = '21EC0FC6E1810DFEEA26545127494B40F5F12FA8670877C4B47516BBCD67EDF5F0652B437B4D3E4E83999E7B8245E2A18A7968E7C3E1C16B5609036E65E0F4AF2C4383AF19F1679DD59726C5D315B21967F5A3E526E645724B61F4C8ABCE98BEB8DF1FD64237DBE356B1F96C73EBA3206AAA4C818518E58E17F0E4265A0A5D7E2196E983C6DA78FC5C73F64E6F3AFF5A';

        var answer = '6A0254133390122000000101019001A078BEB21E7BEE9F85F18E15F1ABB842556A33F84390236605C57C9AAA8127CC7E9C33FBF81894BBA0F53C7D1DE61D64E7C061F1689B1B21D91F0E10A5FD9AB0FCDFC06B5D860968F34D1D04FF6770E533661196B45F219500C9B10B18B71A1464BF6B673C19D432FCB8AB4419EDCC2AE17A4472643A56D1AD98F2910DE3E1B8BC';

        var result = rsa.encrypt(ca_public_modulus, ca_public_exponent, encrypted_msg);

        assert(answer === result);
    },

    'RSA decryption 176 byte' : function() {
        var ca_public_modulus = '9E2F74BF4AB521019735BFC7E4CBC56B6F64AFF1ED7B79998EE5B3DFFE23DFC8E2DD0025575AF94DE814264528AF6F8005A538B3D6AE881B350F89595588E51F7423E711109DEC169FDD560602D80EF46E582C8C546C8930394BD534412A88CC9FF4DFC08AE716A595EF1AF7C32EDFCF996433EB3C36BCE093E44E0BDE228E0299A0E358BF28308DB4739815DD09F1E89654CC7CC193E2AC17C4DA335D904B8EC06ACFBDE083F76933C969672E9AFEA3';
        var ca_public_exponent = '03';

        var ecrypted_msg = '914315BDA0CCFC820718C0225A278C2964B9668C697A4C00451C75A10180B0BD3E2601BDD30D3319DC4006E911E271B7C6AAEE28FA65312BB1F680489CDC9CD311980E156F5841B7C6B0EFE3BD3DAA1C4D9DE235644F461C79DF0336A8C570CA69BAC1EA1570C590178AAC7532934839660F4C8F3B74023DBCD75E655240952AA1E4CB4ECF322749B51B72865B1B28C1000E542E562FF20E0F9FCA28C930831F8FDC06FC7B05E162CB37570E41C65D14';

        var answer = '6A025413339012200000010101B001A011ECC527EAFD0C1C8A9D87D64B0B5BE1890E9D03BEE2308AA5983F2C18D0703CDC7B943E1FC00AD6395A8EC25CF2714897DC950A1D97AD3A391EB1CA988AA3DCCB7ACBF81DDD730E828D99EF5C26801A93B2B8DADD7938CF035A8534EF839410383AE43CC1A8694984A8E8577CB5F370201D866D9618EC05BD9A95A6EF4545CFB354D9C61E2082B183BC47F5E0A015A5AD26C5E5981C4BA469E34B9F6E31DEBC';

        var result = rsa.encrypt(ca_public_modulus, ca_public_exponent, ecrypted_msg);

        assert(answer === result);
    },
    'rsa example' :  function() {
        var caPublicKeyInfo = {
            "E": "03",
            "index": "F3",
            "rid": "A000000004",
            "M": "98F0C770F23864C2E766DF02D1E833DFF4FFE92D696E1642F0A88C5694C6479D16DB1537BFE29E4FDC6E6E8AFD1B0EB7EA0124723C333179BF19E93F10658B2F776E829E87DAEDA9C94A8B3382199A350C077977C97AFF08FD11310AC950A72C3CA5002EF513FCCC286E646E3C5387535D509514B3B326E1234F9CB48C36DDD44B416D23654034A66F403BA511C5EFA3",
            "keyLength": 1152,
            "sha1": "A69AC7603DAF566E972DEDC2CB433E07E8B01A9A"
        };

        var issuerPublicKeyCertificate = '21EC0FC6E1810DFEEA26545127494B40F5F12FA8670877C4B47516BBCD67EDF5F0652B437B4D3E4E83999E7B8245E2A18A7968E7C3E1C16B5609036E65E0F4AF2C4383AF19F1679DD59726C5D315B21967F5A3E526E645724B61F4C8ABCE98BEB8DF1FD64237DBE356B1F96C73EBA3206AAA4C818518E58E17F0E4265A0A5D7E2196E983C6DA78FC5C73F64E6F3AFF5A';
        var answer = '6A0254133390122000000101019001A078BEB21E7BEE9F85F18E15F1ABB842556A33F84390236605C57C9AAA8127CC7E9C33FBF81894BBA0F53C7D1DE61D64E7C061F1689B1B21D91F0E10A5FD9AB0FCDFC06B5D860968F34D1D04FF6770E533661196B45F219500C9B10B18B71A1464BF6B673C19D432FCB8AB4419EDCC2AE17A4472643A56D1AD98F2910DE3E1B8BC';

        var result = rsa.encrypt(caPublicKeyInfo.M, caPublicKeyInfo.E, issuerPublicKeyCertificate);

        assert (answer === result);
    },
    'get ca public example 1': function() {
        // input: RID, key index
        var mchipRid = 'A000000004';
        var keyIndex = 'F3';
        var caPublicKeyInfo = rsa.getCaPublicKey(mchipRid, keyIndex);

        var caPublicKeyModulus = '98F0C770F23864C2E766DF02D1E833DFF4FFE92D696E1642F0A88C5694C6479D16DB1537BFE29E4FDC6E6E8AFD1B0EB7EA0124723C333179BF19E93F10658B2F776E829E87DAEDA9C94A8B3382199A350C077977C97AFF08FD11310AC950A72C3CA5002EF513FCCC286E646E3C5387535D509514B3B326E1234F9CB48C36DDD44B416D23654034A66F403BA511C5EFA3';
        var caPublicKeyExponent = '03';
        var keyLengthByte = 144;


        assert(caPublicKeyInfo['modulus'] === caPublicKeyModulus);
        assert(caPublicKeyInfo['exponent'] === caPublicKeyExponent);
        assert(caPublicKeyInfo['keyLength']/8 === keyLengthByte);
    }
};